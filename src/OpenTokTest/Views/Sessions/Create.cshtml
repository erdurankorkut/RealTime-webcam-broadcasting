@model OpenTokTest.Models.Sessions

@{
    ViewBag.Title = "Create";
}
<script src="http://static.opentok.com/v1.1/js/TB.min.js" type="text/javascript" charset="utf-8"></script>
<script type="text/javascript" charset="utf-8">
 var apiKey = "23153492"; // Replace with your API key. See https://dashboard.tokbox.com/projects
 var sessionId = '@Ajax.JavaScriptStringEncode(Model.SessionName)'; // Replace with your own session ID. See https://dashboard.tokbox.com/projects
 var token = "@Ajax.JavaScriptStringEncode(Model.SessionToken)"; // Replace with a generated token. See https://dashboard.tokbox.com/projects

var session;
 var publisher;
 var subscribers = {};
 var VIDEO_WIDTH = 320;
 var VIDEO_HEIGHT = 240;

TB.addEventListener("exception", exceptionHandler);

// Un-comment the following to set automatic logging:
 // TB.setLogLevel(TB.DEBUG);

if (TB.checkSystemRequirements() != TB.HAS_REQUIREMENTS) {
 alert("You don't have the minimum requirements to run this application."
 + "Please upgrade to the latest version of Flash.");
 } else {
 session = TB.initSession(sessionId); // Initialize session

// Add event listeners to the session
 session.addEventListener('sessionConnected', sessionConnectedHandler);
 session.addEventListener('sessionDisconnected', sessionDisconnectedHandler);
 session.addEventListener('connectionCreated', connectionCreatedHandler);
 session.addEventListener('connectionDestroyed', connectionDestroyedHandler);
 session.addEventListener('streamCreated', streamCreatedHandler);
 session.addEventListener('streamDestroyed', streamDestroyedHandler);
 }
 function connect() {
 session.connect(apiKey, token);
 }

function disconnect() {
 session.disconnect();
 hide('disconnectLink');

 }
 function startPublishing() {
 if (!publisher) {
 var parentDiv = document.getElementById("myCamera");
 var publisherDiv = document.createElement('div'); // Create a div for the publisher to replace
 publisherDiv.setAttribute('id', 'opentok_publisher');
 parentDiv.appendChild(publisherDiv);
 var publisherProps = { width: VIDEO_WIDTH, height: VIDEO_HEIGHT };
 publisher = TB.initPublisher(apiKey, publisherDiv.id, publisherProps); // Pass the replacement div id and properties
 session.publish(publisher);
 show('unpublishLink');
 hide('publishLink');
 }
 }

function stopPublishing() {
 if (publisher) {
 session.unpublish(publisher);
 }
 publisher = null;

show('publishLink');
 hide('unpublishLink');
 }

function sessionConnectedHandler(event) {
 // Subscribe to all streams currently in the Session
 for (var i = 0; i < event.streams.length; i++) {
 addStream(event.streams[i]);
 }
 show('disconnectLink');
 startPublishing();
 hide('connectLink');
 }

function streamCreatedHandler(event) {
 // Subscribe to the newly created streams
 for (var i = 0; i < event.streams.length; i++) {
 addStream(event.streams[i]);
 }
 }

function streamDestroyedHandler(event) {
 // This signals that a stream was destroyed. Any Subscribers will automatically be removed.
 // This default behaviour can be prevented using event.preventDefault()
 }

function sessionDisconnectedHandler(event) {
 // This signals that the user was disconnected from the Session. Any subscribers and publishers
 // will automatically be removed. This default behaviour can be prevented using event.preventDefault()
 publisher = null;

show('connectLink');
 stopPublishing();
 }

function connectionDestroyedHandler(event) {
 // This signals that connections were destroyed
 }

function connectionCreatedHandler(event) {
 // This signals new connections have been created.
 }

/*
 If you un-comment the call to TB.setLogLevel(), above, OpenTok automatically displays exception event messages.
 */
 function exceptionHandler(event) {
 alert("Exception: " + event.code + "::" + event.message);
 }
 function addStream(stream) {
 // Check if this is the stream that I am publishing, and if so do not publish.
 if (stream.connection.connectionId == session.connection.connectionId) {
 return;
 }
 var subscriberDiv = document.createElement('div'); // Create a div for the subscriber to replace
 subscriberDiv.setAttribute('id', stream.streamId); // Give the replacement div the id of the stream as its id.
 document.getElementById("subscribers").appendChild(subscriberDiv);
 var subscriberProps = { width: VIDEO_WIDTH, height: VIDEO_HEIGHT };
 subscribers[stream.streamId] = session.subscribe(stream, subscriberDiv.id, subscriberProps);
 }

function show(id) {
 document.getElementById(id).style.display = 'block';
 }

function hide(id) {
 document.getElementById(id).style.display = 'none';
 }
</script>
<h2>Create</h2>

<div>
    <input type="button" value="Connect" id="connectLink" onclick="javascript: connect()" />
    <input type="button" value="Leave" id="disconnectLink" onclick="javascript: disconnect()" />
</div>
<div id="myCamera" class="publisherContainer"></div>
<div id="subscribers"></div>
<script type="text/javascript" charset="utf-8">
    show('connectLink');
</script>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}