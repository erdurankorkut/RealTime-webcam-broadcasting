@model OpenTokTest.Models.Sessions

@{
    ViewBag.Title = "Details";
}
<script src="http://static.opentok.com/v1.1/js/TB.min.js" type="text/javascript" charset="utf-8"></script>
<script type="text/javascript" charset="utf-8">
 var apiKey = "apiKey";
 var sessionId = '@Ajax.JavaScriptStringEncode(Model.SessionName)';
 var token = '@Ajax.JavaScriptStringEncode(Model.SessionToken)';

var session;
 var publisher;
 var subscriber = {};
 var VIDEO_WIDTH = 320;
 var VIDEO_HEIGHT = 240;

TB.addEventListener("exception", exceptionHandler);

if (TB.checkSystemRequirements() != TB.HAS_REQUIREMENTS) {
 alert("You don't have the minimum requirements to run this application."
 + "Please upgrade to the latest version of Flash.");
 }
 else {
 session = TB.initSession(sessionId);
 session.addEventListener("sessionConnected", sessionConnectedHandler);
 session.addEventListener("sessionDisconnected", sessionDisconnectedHandler);
 session.addEventListener("connectionCreated", connectionCreatedHandler);
 session.addEventListener("connectionDestroyed", connectionDestroyedHandler);
 session.addEventListener('streamCreated', streamCreatedHandler);
 session.addEventListener('streamDestroyed', streamDestroyedHandler);
 }
 function connect() {
 session.connect(apiKey, token);
 }
 function disconnect() {
 session.disconnect();
 hide("disconnectLink");
 }

function sessionConnectedHandler(event) {
 for (var i = 0; i < event.streams.length; i++) {
 addStream(event.streams[i]);
 }
 show("disconnectLink");
 hide("connectLink");
 }
 function streamCreatedHandler(event) {
 // Subscribe to the newly created streams
 for (var i = 0; i < event.streams.length; i++) {
 addStream(event.streams[i]);
 }
 }
 function streamDestroyedHandler(event) {
 // This signals that a stream was destroyed. Any Subscribers will automatically be removed.
 // This default behaviour can be prevented using event.preventDefault()
 }
 function sessionDisconnectedHandler(event) {
 // This signals that the user was disconnected from the Session. Any subscribers and publishers
 // will automatically be removed. This default behaviour can be prevented using event.preventDefault()
 publisher = null;

show('connectLink');
 hide('disconnectLink');
 hide('publishLink');
 hide('unpublishLink');
 }
 function connectionDestroyedHandler(event) {
 // This signals that connections were destroyed
 }

function connectionCreatedHandler(event) {
 // This signals new connections have been created.
 }

/*
 If you un-comment the call to TB.setLogLevel(), above, OpenTok automatically displays exception event messages.
 */
 function exceptionHandler(event) {
 alert("Exception: " + event.code + "::" + event.message);
 }
 function addStream(stream) {
 // Check if this is the stream that I am publishing, and if so do not publish.
 if (stream.connection.connectionId == session.connection.connectionId) {
 return;
 }
 var subscriberDiv = document.createElement('div'); // Create a div for the subscriber to replace
 subscriberDiv.setAttribute('id', stream.streamId); // Give the replacement div the id of the stream as its id.
 document.getElementById("subscribers").appendChild(subscriberDiv);
 var subscriberProps = { width: VIDEO_WIDTH, height: VIDEO_HEIGHT };
 subscribers[stream.streamId] = session.subscribe(stream, subscriberDiv.id, subscriberProps);
 }

function show(id) {
 document.getElementById(id).style.display = 'block';
 }

function hide(id) {
 document.getElementById(id).style.display = 'none';
 }
</script>
<h2>Details</h2>

<fieldset>
    <legend>Sessions</legend>

    <div class="display-label">
        @Html.DisplayNameFor(model => model.SessionName)
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.SessionName)
    </div>
</fieldset>
<p>
    <input type="button" value="Connect" id="connectLink" onclick="javascript:connect()" />
    <input type="button" value="Leave" id="disconnectLink" onclick="javascript: disconnect()" />
</p>
<div id="myCamera" class="publisherContainer"></div>
<div id="subscribers"></div>
<script type="text/javascript" charset="utf-8">
    show('connectLink');
</script>